# existing-system-truth.yaml
# Generated by Compatibility Agent
# Purpose: Document current state of existing system (brownfield baseline)
# Schema: bmad-core/schemas/brownfield/existing-system-truth.schema.md

metadata:
  version: "1.0.0"
  analyzed_date: "{{ANALYZED_DATE}}"
  last_validated: "{{LAST_VALIDATED}}"
  system_name: "{{SYSTEM_NAME}}"
  system_version: "{{SYSTEM_VERSION}}"
  analysis_method: "combined"  # [code_review, runtime_analysis, combined]
  analyzers: {{ANALYZERS}}

system_overview:
  name: "{{SYSTEM_NAME}}"
  description: |
    {{SYSTEM_DESCRIPTION}}
  version: "{{SYSTEM_VERSION}}"

  deployment:
    environment: "production"  # [production, staging, development]
    deployment_date: "{{DEPLOYMENT_DATE}}"
    user_base: "{{USER_BASE}}"

  tech_stack:
    languages: {{LANGUAGES}}
    frameworks: {{FRAMEWORKS}}
    databases: {{DATABASES}}
    infrastructure: {{INFRASTRUCTURE}}
    third_party_services: {{THIRD_PARTY_SERVICES}}

current_architecture:
  style: "{{ARCHITECTURE_STYLE}}"  # [monolith, microservices, serverless, etc.]

  components:
    - id: "COMP-001"
      name: "{{COMPONENT_NAME}}"
      type: "service"  # [service, module, library, database, etc.]
      description: "{{COMPONENT_DESCRIPTION}}"
      responsibilities: ["{{RESPONSIBILITY_1}}"]
      dependencies: []  # Component IDs
      interfaces:
        - type: "rest_api"  # [rest_api, graphql, grpc, database, message_queue]
          endpoint: "{{ENDPOINT}}"
          contract: "{{CONTRACT_LOCATION}}"
          consumers: ["{{CONSUMER_1}}"]
      data_stores:
        - name: "{{DATASTORE_NAME}}"
          type: "sql"  # [sql, nosql, cache, file_system]
          schema_location: "{{SCHEMA_LOCATION}}"
      code_location: "{{CODE_LOCATION}}"
    # Add more components

  data_flow:
    - id: "FLOW-001"
      name: "{{FLOW_NAME}}"
      description: "{{FLOW_DESCRIPTION}}"
      path: ["COMP-001", "COMP-002"]  # Component IDs in sequence
      data_transformations: ["{{TRANSFORMATION_1}}"]
    # Add more data flows

existing_data_models:
  - id: "MODEL-001"
    name: "{{MODEL_NAME}}"
    type: "entity"  # [entity, value_object, dto, event]
    location: "{{CODE_LOCATION}}"

    fields:
      - name: "{{FIELD_NAME}}"
        type: "{{FIELD_TYPE}}"
        required: true
        default_value: null
        validation_rules: ["{{VALIDATION_RULE}}"]
        usage_analysis:
          read_locations: ["{{READ_LOCATION}}"]
          write_locations: ["{{WRITE_LOCATION}}"]
          null_frequency: "5%"  # % of time field is null
      # Add more fields

    relationships:
      - field: "{{FIELD_NAME}}"
        related_model: "MODEL-002"
        type: "one-to-many"  # [one-to-one, one-to-many, many-to-many]
        enforced: true  # Is relationship enforced in DB/code?
      # Add more relationships

    constraints:
      - type: "unique"  # [unique, foreign_key, check, etc.]
        definition: "{{CONSTRAINT_DEFINITION}}"
        enforced_where: "database"  # [database, application, both, none]
      # Add more constraints

    usage_statistics:
      record_count: 0
      growth_rate: "{{GROWTH_RATE}}"
      query_patterns: ["{{QUERY_PATTERN}}"]

  # Add more data models

current_business_logic:
  - id: "LOGIC-001"
    name: "{{LOGIC_NAME}}"
    description: "{{ACTUAL_BEHAVIOR_DESCRIPTION}}"  # What it ACTUALLY does
    type: "validation"  # [validation, calculation, workflow, integration]
    location: "{{CODE_LOCATION}}"
    trigger: "{{TRIGGER_DESCRIPTION}}"

    actual_behavior:
      inputs: ["{{INPUT_1}}"]
      process: "{{PROCESS_DESCRIPTION}}"
      outputs: ["{{OUTPUT_1}}"]
      side_effects: ["{{SIDE_EFFECT_1}}"]

    edge_cases:
      - scenario: "{{EDGE_CASE_SCENARIO}}"
        behavior: "{{ACTUAL_BEHAVIOR}}"
        expected_vs_actual: "{{DISCREPANCY}}"  # If there's a discrepancy
        frequency: "occasional"  # [common, occasional, rare]
      # Add more edge cases

    test_coverage:
      covered: false
      test_location: ""
      test_dataset_id: "REGRESSION-TEST-001"

    dependencies: []  # Other logic IDs

  # Add more business logic

current_apis:
  - id: "API-001"
    endpoint: "{{ENDPOINT}}"
    method: "{{HTTP_METHOD}}"  # [GET, POST, PUT, DELETE, etc.]
    description: "{{API_DESCRIPTION}}"

    request:
      parameters: []
      body_schema: "{{BODY_SCHEMA}}"
      headers: ["{{HEADER}}"]

    response:
      success_schema: "{{SUCCESS_SCHEMA}}"
      error_schemas: ["{{ERROR_SCHEMA}}"]
      status_codes: [200, 400, 500]

    authentication: "{{AUTH_METHOD}}"
    authorization: "{{AUTHZ_METHOD}}"
    rate_limiting: "{{RATE_LIMIT}}"

    actual_behavior:
      response_time_p95: "{{P95_MS}}ms"
      error_rate: "{{ERROR_RATE}}%"
      usage_frequency: "{{REQUESTS_PER_DAY}} requests/day"

    consumers:
      - name: "{{CONSUMER_NAME}}"
        type: "internal"  # [internal, external, third_party]
        dependency_level: "critical"  # [critical, important, optional]

    breaking_change_risk: "high"  # [high, medium, low]
    test_dataset_id: "API-REGRESSION-001"

  # Add more APIs

current_user_workflows:
  - id: "WORKFLOW-001"
    name: "{{WORKFLOW_NAME}}"
    description: "{{WORKFLOW_DESCRIPTION}}"
    user_role: "{{USER_ROLE}}"

    steps:
      - step_number: 1
        action: "{{ACTION}}"
        ui_component: "{{UI_COMPONENT}}"
        backend_apis: ["API-001"]
      # Add more steps

    completion_rate: "{{COMPLETION_RATE}}%"
    abandonment_points: ["{{ABANDONMENT_POINT}}"]
    test_dataset_id: "WORKFLOW-REGRESSION-001"

  # Add more workflows

known_issues:
  - id: "ISSUE-001"
    title: "{{ISSUE_TITLE}}"
    description: "{{ISSUE_DESCRIPTION}}"
    severity: "high"  # [critical, high, medium, low]
    impact: "{{IMPACT_DESCRIPTION}}"
    workaround: "{{WORKAROUND}}"
    affected_components: ["COMP-001"]
    reproduction_steps: ["{{STEP_1}}"]
    test_dataset_id: "ISSUE-TEST-001"
    status: "open"  # [open, acknowledged, wont_fix]
    decision_rationale: ""
  # Add more known issues

technical_debt:
  - id: "DEBT-001"
    category: "code_quality"  # [code_quality, architecture, security, performance]
    description: "{{DEBT_DESCRIPTION}}"
    location: "{{CODE_LOCATION}}"
    impact:
      maintenance_cost: "high"  # [high, medium, low]
      change_risk: "high"  # [high, medium, low]
    remediation_effort: "{{EFFORT_ESTIMATE}}"
    priority: "medium"  # [high, medium, low]
  # Add more technical debt

integration_points:
  - id: "INT-001"
    name: "{{INTEGRATION_NAME}}"
    type: "external_api"  # [external_api, database, file_system, message_queue]
    provider: "{{PROVIDER_NAME}}"
    integration_method: "{{METHOD}}"
    data_format: "{{FORMAT}}"
    dependencies:
      - name: "{{DEPENDENCY_NAME}}"
        version: "{{VERSION}}"
        criticality: "critical"  # [critical, important, optional]
    failure_behavior: "{{FAILURE_BEHAVIOR}}"
    fallback_mechanism: "{{FALLBACK}}"
    monitoring: "{{MONITORING_METHOD}}"
    test_dataset_id: "INT-REGRESSION-001"
  # Add more integration points

security_posture:
  authentication:
    method: "{{AUTH_METHOD}}"
    implementation: "{{AUTH_IMPLEMENTATION}}"
  authorization:
    model: "rbac"  # [rbac, abac, acl, etc.]
    implementation: "{{AUTHZ_IMPLEMENTATION}}"
  data_protection:
    encryption_at_rest: true
    encryption_in_transit: true
    pii_handling: "{{PII_HANDLING}}"
  vulnerabilities:
    - id: "VULN-001"
      type: "{{VULN_TYPE}}"
      severity: "high"  # [critical, high, medium, low]
      status: "open"  # [open, mitigated, accepted]
    # Add more vulnerabilities

performance_characteristics:
  - metric: "response_time"  # [response_time, throughput, resource_usage]
    component: "API-001"
    current_value: "{{CURRENT_VALUE}}"
    measurement_method: "{{MEASUREMENT_METHOD}}"
    acceptable_range: "{{ACCEPTABLE_RANGE}}"
    test_dataset_id: "PERF-BASELINE-001"
  # Add more performance metrics

regression_test_suite:
  location: "{{TEST_LOCATION}}"
  coverage_percentage: 0
  test_datasets_dir: "test-datasets/regression/"
  critical_paths:
    - path_name: "{{CRITICAL_PATH_NAME}}"
      description: "{{PATH_DESCRIPTION}}"
      test_dataset_ids: ["CRITICAL-PATH-001"]
      validation_frequency: "every_commit"  # [every_commit, daily, weekly]
    # Add more critical paths

compatibility_requirements:
  backwards_compatibility:
    api_versions: ["{{API_VERSION}}"]
    data_formats: ["{{DATA_FORMAT}}"]
    client_versions: ["{{CLIENT_VERSION}}"]
  integration_compatibility:
    - integration_id: "INT-001"
      constraint: "{{CONSTRAINT}}"
      test_dataset_id: "COMPAT-TEST-001"
  migration_constraints:
    - constraint: "{{MIGRATION_CONSTRAINT}}"
      reason: "{{REASON}}"
      test_method: "{{TEST_METHOD}}"

observability:
  logging:
    locations: ["{{LOG_LOCATION}}"]
    format: "{{LOG_FORMAT}}"
    retention: "{{RETENTION_PERIOD}}"
  metrics:
    - metric_name: "{{METRIC_NAME}}"
      type: "counter"  # [counter, gauge, histogram]
      purpose: "{{METRIC_PURPOSE}}"
  tracing:
    enabled: false
    tool: ""
    coverage: ""

validation_evidence:
  code_analysis:
    - tool: "{{ANALYSIS_TOOL}}"
      report_location: "{{REPORT_LOCATION}}"
      findings_summary: "{{FINDINGS}}"
  runtime_analysis:
    - method: "profiling"  # [profiling, load_testing, monitoring]
      duration: "{{DURATION}}"
      findings_summary: "{{FINDINGS}}"
  user_research:
    - method: "analytics"  # [interviews, analytics, surveys]
      sample_size: 0
      findings_summary: "{{FINDINGS}}"

linkage:
  domain_truth_file: "domain-truth.yaml"
  enhancement_truth_file: "enhancement-truth.yaml"
  compatibility_analysis_file: "compatibility-analysis.md"
  migration_strategy_file: "migration-strategy.yaml"
  regression_test_datasets_dir: "test-datasets/regression/"

# [[LLM: INSTRUCTIONS FOR COMPATIBILITY AGENT]]
# [[LLM: When generating this file:]]
# [[LLM: 1. Analyze actual code, not documentation - trust observed behavior]]
# [[LLM: 2. Create regression test datasets for all critical paths]]
# [[LLM: 3. Document ALL integration points and dependencies]]
# [[LLM: 4. Capture known issues and technical debt honestly]]
# [[LLM: 5. Measure and document current performance baselines]]
# [[LLM: 6. Identify ALL consumers of APIs (internal + external)]]
# [[LLM: 7. Document actual behavior even if it differs from specs]]
# [[LLM: 8. Link to compatibility analysis and migration strategy]]
