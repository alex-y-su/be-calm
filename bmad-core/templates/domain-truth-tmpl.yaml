# domain-truth.yaml
# Generated by Oracle Agent
# Purpose: Canonical domain truth - immutable foundation for all artifacts
# Schema: bmad-core/schemas/truth/domain-truth.schema.md

metadata:
  version: "1.0.0"
  created_date: "{{CREATED_DATE}}"
  last_validated: "{{LAST_VALIDATED}}"
  domain_name: "{{DOMAIN_NAME}}"
  project_id: "{{PROJECT_ID}}"
  authors: {{AUTHORS}}
  validation_status: "draft"  # [draft, validated, production]

domain:
  name: "{{DOMAIN_NAME}}"
  description: |
    {{DOMAIN_DESCRIPTION}}

  scope:
    included:
      - "{{INCLUDED_SCOPE_1}}"
      # Add more included scope items

    excluded:
      - "{{EXCLUDED_SCOPE_1}}"
      # Add more excluded scope items

    boundaries:
      - "{{BOUNDARY_1}}"
      # Add more domain boundaries

  glossary:
    - term: "{{TERM_1}}"
      definition: "{{DEFINITION_1}}"
      aliases: []
      validation_criteria: "{{VALIDATION_CRITERIA_1}}"
    # Add more glossary terms

concepts:
  - id: "CONCEPT-001"
    name: "{{CONCEPT_NAME}}"
    type: "entity"  # [entity, value_object, aggregate, event, service]
    description: "{{CONCEPT_DESCRIPTION}}"

    properties:
      - name: "{{PROPERTY_NAME}}"
        type: "{{PROPERTY_TYPE}}"
        required: true
        constraints:
          - "{{CONSTRAINT_1}}"
        validation_test_id: "TEST-DATASET-001"
      # Add more properties

    relationships:
      - related_to: "CONCEPT-002"
        type: "one-to-many"  # [one-to-one, one-to-many, many-to-many]
        description: "{{RELATIONSHIP_DESCRIPTION}}"
        constraints: []
      # Add more relationships

    invariants:
      - id: "INV-001"
        description: "{{INVARIANT_DESCRIPTION}}"
        validation_test_id: "TEST-DATASET-002"
        criticality: "critical"  # [critical, important, nice_to_have]
      # Add more invariants

  # Add more concepts

domain_rules:
  - id: "RULE-001"
    name: "{{RULE_NAME}}"
    description: "{{RULE_DESCRIPTION}}"
    type: "business_logic"  # [business_logic, validation, calculation, workflow]

    preconditions:
      - "{{PRECONDITION_1}}"
    postconditions:
      - "{{POSTCONDITION_1}}"

    formula: "{{FORMULA}}"  # Optional: mathematical or logical formula

    examples:
      - input: {{{EXAMPLE_INPUT}}}
        expected_output: {{{EXAMPLE_OUTPUT}}}
        test_dataset_id: "TEST-DATASET-003"
      # Add more examples

    exceptions:
      - condition: "{{EXCEPTION_CONDITION}}"
        handling: "{{EXCEPTION_HANDLING}}"
        test_dataset_id: "TEST-DATASET-004"
      # Add more exceptions

    criticality: "critical"  # [critical, important, nice_to_have]
    validation_test_ids: ["TEST-DATASET-003", "TEST-DATASET-004"]

  # Add more domain rules

functional_requirements:
  - id: "FR-001"
    name: "{{FR_NAME}}"
    description: "{{FR_DESCRIPTION}}"
    rationale: "{{FR_RATIONALE}}"

    actors: ["{{ACTOR_1}}"]
    preconditions: ["{{PRECONDITION_1}}"]
    postconditions: ["{{POSTCONDITION_1}}"]

    main_flow:
      - step: "{{STEP_1}}"
        validation_point: "{{VALIDATION_POINT_1}}"
      # Add more steps

    alternate_flows:
      - name: "{{ALTERNATE_FLOW_NAME}}"
        steps: ["{{ALT_STEP_1}}"]
      # Add more alternate flows

    exception_flows:
      - condition: "{{EXCEPTION_CONDITION}}"
        steps: ["{{EXCEPTION_STEP_1}}"]
      # Add more exception flows

    acceptance_criteria:
      - criterion: "{{CRITERION_1}}"
        test_dataset_id: "TEST-DATASET-005"
        validation_method: "automated_test"  # [automated_test, manual_test, inspection]
      # Add more acceptance criteria

    dependencies: []  # Other FR IDs
    priority: "critical"  # [critical, high, medium, low]
    validation_test_ids: ["TEST-DATASET-005"]

  # Add more functional requirements

quality_attributes:
  - category: "performance"  # [performance, security, usability, reliability, etc.]
    attribute: "{{ATTRIBUTE_NAME}}"
    requirement: "{{REQUIREMENT}}"
    measurement: "{{MEASUREMENT_METHOD}}"
    target: "{{TARGET_VALUE}}"
    validation_test_id: "PERF-TEST-001"
    priority: "high"  # [critical, high, medium, low]
  # Add more quality attributes

constraints:
  - id: "CON-001"
    type: "business"  # [technical, business, regulatory, resource]
    description: "{{CONSTRAINT_DESCRIPTION}}"
    impact: "{{CONSTRAINT_IMPACT}}"
    mitigation: "{{MITIGATION_STRATEGY}}"
    validation_method: "{{VALIDATION_METHOD}}"
  # Add more constraints

assumptions:
  - id: "ASM-001"
    description: "{{ASSUMPTION_DESCRIPTION}}"
    validation_status: "assumed"  # [assumed, validated, invalidated]
    validation_test_id: ""  # Optional
    risk_if_invalid: "{{RISK_DESCRIPTION}}"
  # Add more assumptions

validation_linkage:
  eval_criteria_file: "eval-criteria.yaml"
  test_datasets_dir: "test-datasets/"
  validation_chain_file: "validation-chain-proof.yaml"

traceability:
  traces_to:
    - source: "{{EXTERNAL_AUTHORITY}}"
      description: "{{TRACE_DESCRIPTION}}"
      verification: "{{VERIFICATION_METHOD}}"
    # Add more external traces

  traced_by:
    - artifact_type: "prd"  # [prd, architecture, story, code]
      artifact_path: "{{ARTIFACT_PATH}}"
      elements: ["FR-001"]  # Domain IDs referenced
    # Add more traced-by artifacts

# [[LLM: INSTRUCTIONS FOR ORACLE AGENT]]
# [[LLM: When generating this file:]]
# [[LLM: 1. Extract domain concepts from domain-analysis.md]]
# [[LLM: 2. Formalize all domain rules with concrete examples]]
# [[LLM: 3. Ensure EVERY rule has at least one test dataset reference]]
# [[LLM: 4. Define clear acceptance criteria for all FRs]]
# [[LLM: 5. Establish traceability to external authorities if applicable]]
# [[LLM: 6. Validate completeness: all facts must be testable/verifiable]]
# [[LLM: 7. Create glossary with consistent terminology]]
# [[LLM: 8. Link to eval-criteria.yaml for validation methods]]
