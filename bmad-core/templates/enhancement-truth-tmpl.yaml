# enhancement-truth.yaml
# Generated by Oracle Agent (brownfield mode)
# Purpose: Define what WILL change when enhancing brownfield system
# Schema: bmad-core/schemas/brownfield/enhancement-truth.schema.md

metadata:
  version: "1.0.0"
  created_date: "{{CREATED_DATE}}"
  last_updated: "{{LAST_UPDATED}}"
  project_name: "{{PROJECT_NAME}}"
  type: "brownfield_enhancement"

reconciliation_source:
  existing_truth: "existing-system-truth.yaml"  # What IS
  domain_truth: "domain-truth.yaml"  # What SHOULD be
  compatibility_analysis: "compatibility-analysis.md"
  migration_strategy: "migration-strategy.yaml"

enhancements:
  - enhancement_id: "ENH-001"
    title: "{{ENHANCEMENT_TITLE}}"
    type: "modification"  # [addition, modification, removal, refactoring]
    rationale: "{{RATIONALE}}"

    current_state:
      fact_id: "EXIST-001"  # From existing-system-truth.yaml
      description: "{{CURRENT_BEHAVIOR}}"
      component: "{{COMPONENT_ID}}"
      location: "{{CODE_LOCATION}}"

    target_state:
      fact_id: "FACT-001"  # From domain-truth.yaml
      description: "{{TARGET_BEHAVIOR}}"
      rationale: "{{WHY_THIS_CHANGE}}"

    gap_analysis:
      discrepancies:
        - current: "{{CURRENT}}"
          desired: "{{DESIRED}}"
          gap: "{{WHAT_NEEDS_TO_CHANGE}}"

    migration_approach:
      strategy: "{{STRATEGY}}"  # [parallel_run, phased_rollout, feature_flag, big_bang]
      migration_strategy_ref: "MIG-001"  # Reference to migration-strategy.yaml
      estimated_effort: "{{EFFORT}}"

    breaking_change: false  # true if this breaks existing functionality
    backward_compatible: true
    backward_compatible_period: "{{PERIOD}}"  # e.g., "3 months"

    affected_components:
      - component_id: "COMP-001"
        impact: "{{IMPACT_DESCRIPTION}}"
        change_required: "{{CHANGE_DESCRIPTION}}"

    affected_apis:
      - api_id: "API-001"
        change_type: "modification"  # [addition, modification, removal, deprecation]
        consumers_affected: ["{{CONSUMER}}"]
        migration_path: "{{MIGRATION_DESCRIPTION}}"

    affected_data_models:
      - model_id: "MODEL-001"
        change_type: "schema_change"  # [schema_change, data_migration, new_model]
        migration_required: true
        migration_complexity: "medium"  # [low, medium, high]

    validation:
      regression_test_ids: ["REGRESSION-TEST-001"]  # Must still pass
      enhancement_test_ids: ["ENHANCEMENT-TEST-001"]  # New tests for enhancement
      compatibility_test_ids: ["COMPAT-TEST-001"]  # Old + new together
      migration_test_ids: ["MIGRATION-TEST-001"]  # Transition tests

    risks:
      - risk: "{{RISK_DESCRIPTION}}"
        likelihood: "medium"  # [low, medium, high]
        impact: "high"  # [low, medium, high]
        mitigation: "{{MITIGATION_STRATEGY}}"

  # Add more enhancements

compatibility_guarantees:
  - guarantee_id: "COMPAT-001"
    description: "{{GUARANTEE_DESCRIPTION}}"
    scope: "{{SCOPE}}"  # What this applies to
    duration: "{{DURATION}}"  # How long guarantee is maintained
    validation_method: "{{VALIDATION}}"
    test_dataset_id: "COMPAT-TEST-001"
  # Add more compatibility guarantees

deprecation_plan:
  - feature_id: "{{FEATURE_ID}}"
    feature_name: "{{FEATURE_NAME}}"
    deprecation_date: "{{DATE}}"
    removal_date: "{{DATE}}"
    replacement: "{{REPLACEMENT_FEATURE}}"
    migration_guide: "{{GUIDE_LOCATION}}"
    affected_users: "{{AFFECTED_USERS}}"
  # Add more deprecations

rollback_strategy:
  rollback_triggers:
    - trigger: "{{TRIGGER_CONDITION}}"
      action: "{{ROLLBACK_ACTION}}"
  rollback_procedure: "{{PROCEDURE}}"
  rollback_time_estimate: "{{TIME}}"
  data_rollback_required: false

success_criteria:
  - criterion_id: "SUCCESS-001"
    description: "{{SUCCESS_CRITERION}}"
    measurement: "{{HOW_TO_MEASURE}}"
    target: "{{TARGET_VALUE}}"
    validation_test_id: "SUCCESS-TEST-001"
  # Add more success criteria

monitoring_plan:
  metrics_to_track:
    - metric_name: "{{METRIC_NAME}}"
      purpose: "{{PURPOSE}}"
      baseline: "{{CURRENT_VALUE}}"
      target: "{{TARGET_VALUE}}"
      alert_threshold: "{{THRESHOLD}}"
  dashboards:
    - dashboard_name: "{{DASHBOARD_NAME}}"
      url: "{{URL}}"
      metrics: ["{{METRIC}}"]

validation_linkage:
  domain_truth_file: "domain-truth.yaml"
  existing_truth_file: "existing-system-truth.yaml"
  eval_criteria_file: "eval-criteria.yaml"
  test_datasets_dir: "test-datasets/"
  regression_tests_dir: "test-datasets/regression/"
  enhancement_tests_dir: "test-datasets/enhancement/"
  compatibility_tests_dir: "test-datasets/compatibility/"
  migration_tests_dir: "test-datasets/migration/"

traceability:
  traces_to_domain:
    - domain_fact_id: "FACT-001"
      enhancement_id: "ENH-001"
      relationship: "implements"

  traces_to_existing:
    - existing_fact_id: "EXIST-001"
      enhancement_id: "ENH-001"
      relationship: "modifies"

  traces_from_prd:
    - prd_requirement_id: "FR-001"
      enhancement_id: "ENH-001"
      relationship: "derived_from"

# [[LLM: INSTRUCTIONS FOR ORACLE AGENT (BROWNFIELD MODE)]]
# [[LLM: When generating this file:]]
# [[LLM: 1. Reconcile existing-system-truth.yaml (what IS) with domain-truth.yaml (what SHOULD be)]]
# [[LLM: 2. For each discrepancy, create an enhancement entry]]
# [[LLM: 3. Classify all changes as breaking or non-breaking]]
# [[LLM: 4. Reference migration-strategy.yaml for migration approach]]
# [[LLM: 5. Ensure ALL enhancements have regression + enhancement + compatibility tests]]
# [[LLM: 6. Define backward compatibility guarantees clearly]]
# [[LLM: 7. Create rollback strategy for each enhancement]]
# [[LLM: 8. Link to both existing-truth and domain-truth for complete picture]]
